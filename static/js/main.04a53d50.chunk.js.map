{"version":3,"sources":["Note.js","Board.js","registerServiceWorker.js","index.js"],"names":["Note","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","editing","edit","bind","assertThisInitialized","remove","save","renderForm","renderDisplay","randomBetween","style","right","window","innerWidth","top","innerHeight","transform","concat","textArea","_newText","focus","select","nextProps","nextState","children","x","y","s","Math","ceil","random","setState","onRemove","index","e","preventDefault","onChange","value","_this2","react_default","a","createElement","className","onSubmit","ref","input","defaultValue","id","floppy_o_default","onClick","pencil_default","trash_default","Component","Board","notes","nextId","note","add","eachNote","update","self","count","fetch","then","response","json","split","forEach","sentence","substring","text","console","log","prevState","toConsumableArray","uniqueId","newText","i","map","objectSpread","filter","src_Note","key","plus_default","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_Board","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"kTA6HeA,cA9Gb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CAACC,SAAS,GAEvBR,EAAKS,KAAOT,EAAKS,KAAKC,KAAVT,OAAAU,EAAA,EAAAV,CAAAD,IACZA,EAAKY,OAASZ,EAAKY,OAAOF,KAAZT,OAAAU,EAAA,EAAAV,CAAAD,IACdA,EAAKa,KAAOb,EAAKa,KAAKH,KAAVT,OAAAU,EAAA,EAAAV,CAAAD,IAEZA,EAAKc,WAAad,EAAKc,WAAWJ,KAAhBT,OAAAU,EAAA,EAAAV,CAAAD,IAClBA,EAAKe,cAAgBf,EAAKe,cAAcL,KAAnBT,OAAAU,EAAA,EAAAV,CAAAD,IACrBA,EAAKgB,cAAgBhB,EAAKgB,cAAcN,KAAnBT,OAAAU,EAAA,EAAAV,CAAAD,IAXLA,oFAgBhBG,KAAKc,MAAQ,CACXC,MAAOf,KAAKa,cAAc,EAAGG,OAAOC,WAAa,IAAK,MACtDC,IAAKlB,KAAKa,cAAc,EAAGG,OAAOG,YAAc,IAAK,MACrDC,UAAS,UAAAC,OAAYrB,KAAKa,eAAe,GAAG,GAAG,OAAtC,mDAMX,IAAIS,EACDtB,KAAKI,MAAMC,WACZiB,EAAWtB,KAAKuB,UACPC,QACTF,EAASG,wDAKSC,EAAWC,GAC/B,OACE3B,KAAKJ,MAAMgC,WAAaF,EAAUE,UAAY5B,KAAKI,QAAUuB,wCAMlDE,EAAEC,EAAEC,GACjB,OAAOF,EAAIG,KAAKC,KAAKD,KAAKE,UAAYJ,EAAED,IAAME,iCAO9C/B,KAAKmC,SAAS,CACZ9B,SAAS,qCAMXL,KAAKJ,MAAMwC,SAASpC,KAAKJ,MAAMyC,oCAG5BC,GAGHA,EAAEC,iBACFvC,KAAKJ,MAAM4C,SAASxC,KAAKuB,SAASkB,MAAOzC,KAAKJ,MAAMyC,OACpDrC,KAAKmC,SAAS,CACZ9B,SAAS,yCAKD,IAAAqC,EAAA1C,KACV,OACE2C,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OAAOhC,MAASd,KAAKc,OACpC6B,EAAAC,EAAAC,cAAA,QAAME,SAAY/C,KAAKU,MACrBiC,EAAAC,EAAAC,cAAA,YAAUG,IAAO,SAAAC,GAAK,OAAIP,EAAKnB,SAAW0B,GAC1BC,aAAgBlD,KAAKJ,MAAMgC,WAC3Ce,EAAAC,EAAAC,cAAA,UAAQM,GAAK,QAAOR,EAAAC,EAAAC,cAACO,EAAAR,EAAD,iDAQ1B,OACED,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OAAOhC,MAASd,KAAKc,OACpC6B,EAAAC,EAAAC,cAAA,SAAI7C,KAAKJ,MAAMgC,UACfe,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,UAAQQ,QAAWrD,KAAKM,KAAM6C,GAAK,QAAOR,EAAAC,EAAAC,cAACS,EAAAV,EAAD,OAC1CD,EAAAC,EAAAC,cAAA,UAAQQ,QAAWrD,KAAKS,OAAQ0C,GAAK,UAASR,EAAAC,EAAAC,cAACU,EAAAX,EAAD,0CAcpD,OAAO5C,KAAKI,MAAMC,QAAUL,KAAKW,aAAeX,KAAKY,uBA3GtC4C,8BCsGJC,cA3Gb,SAAAA,EAAY7D,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAyD,IAChB5D,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2D,GAAAtD,KAAAH,KAAMJ,KACDQ,MAAQ,CAEXsD,MAAO,CACL,CACEP,GAAItD,EAAK8D,SACTC,KAAM,MAgBZ/D,EAAKgE,IAAMhE,EAAKgE,IAAItD,KAATT,OAAAU,EAAA,EAAAV,CAAAD,IACXA,EAAKiE,SAAWjE,EAAKiE,SAASvD,KAAdT,OAAAU,EAAA,EAAAV,CAAAD,IAChBA,EAAKkE,OAASlE,EAAKkE,OAAOxD,KAAZT,OAAAU,EAAA,EAAAV,CAAAD,IACdA,EAAKY,OAASZ,EAAKY,OAAOF,KAAZT,OAAAU,EAAA,EAAAV,CAAAD,IACdA,EAAK8D,OAAS9D,EAAK8D,OAAOpD,KAAZT,OAAAU,EAAA,EAAAV,CAAAD,IA3BEA,oFAgChB,IAAImE,EAAOhE,KACRA,KAAKJ,MAAMqE,OACZC,MAAK,uDAAA7C,OAAwDrB,KAAKJ,MAAMqE,QACrEE,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAK,GACFC,MAAM,MACNC,QAAQ,SAAAC,GAAQ,OAAIR,EAAKH,IAAIW,EAASC,UAAU,EAAG,qCAMtEC,GAAK,IAAAhC,EAAA1C,KACP2E,QAAQC,IAAI,YACZ5E,KAAKmC,SAAS,SAAA0C,GAAS,MAAK,CAC1BnB,MAAK,GAAArC,OAAAvB,OAAAgF,EAAA,EAAAhF,CACA+E,EAAUnB,OADV,CACiB,CAClBP,GAAIT,EAAKiB,SACTC,KAAMc,yCASZ,OADA1E,KAAK+E,SAAW/E,KAAK+E,UAAY,EAC1B/E,KAAK+E,0CAIPC,EAASC,GACdN,QAAQC,IAAI,yBAA0BK,EAAGD,GACzChF,KAAKmC,SAAS,SAAA0C,GAAS,MAAK,CAC1BnB,MAAOmB,EAAUnB,MAAMwB,IACrB,SAAAtB,GAAI,OAAKA,EAAKT,KAAO8B,EAAKrB,EAAlB9D,OAAAqF,EAAA,EAAArF,CAAA,GAA6B8D,EAA7B,CAAmCA,KAAMoB,wCAMhD7B,GACLwB,QAAQC,IAAI,oBAAqBzB,GACjCnD,KAAKmC,SAAS,SAAA0C,GAAS,MAAK,CAC1BnB,MAAMmB,EAAUnB,MAAM0B,OAAO,SAAAxB,GAAI,OAAIA,EAAKT,KAAOA,wCAK5CS,EAAMqB,GACb,OAEEtC,EAAAC,EAAAC,cAACwC,EAAD,CAAMC,IAAO1B,EAAKT,GACZd,MAASuB,EAAKT,GACdX,SAAYxC,KAAK+D,OACjB3B,SAAYpC,KAAKS,QAChBmD,EAAKA,uCAOd,OACEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAY,SACd9C,KAAKI,MAAMsD,MAAMwB,IAAIlF,KAAK8D,UAC3BnB,EAAAC,EAAAC,cAAA,UAAQQ,QAAWrD,KAAK6D,IAAItD,KAAK,KAAM,YACvC4C,GAAK,OACHR,EAAAC,EAAAC,cAAC0C,EAAA3C,EAAD,eAtGUY,aCKdgC,EAAcC,QACW,cAA7BzE,OAAO0E,SAASC,UAEe,UAA7B3E,OAAO0E,SAASC,UAEhB3E,OAAO0E,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACT3B,KAAK,SAAA+B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBhG,QACf2F,UAAUC,cAAcO,WAK1B5B,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrB4B,MAAM,SAAAC,GACL9B,QAAQ8B,MAAM,4CAA6CA,KC5DjEC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,CAAO3C,MAAO,KAAO4C,SAASC,eAAe,SDU9C,WACb,GAA6C,kBAAmBf,UAAW,CAGzE,GADkB,IAAIgB,IAAIC,uCAAwBhG,OAAO0E,UAC3CuB,SAAWjG,OAAO0E,SAASuB,OAIvC,OAGFjG,OAAOkG,iBAAiB,OAAQ,WAC9B,IAAMpB,EAAK,GAAAzE,OAAM2F,uCAAN,sBAEPxB,EAwCV,SAAiCM,GAE/B5B,MAAM4B,GACH3B,KAAK,SAAAC,GAGkB,MAApBA,EAAS+C,SACuD,IAAhE/C,EAASgD,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CvB,UAAUC,cAAcuB,MAAMpD,KAAK,SAAA+B,GACjCA,EAAasB,aAAarD,KAAK,WAC7BnD,OAAO0E,SAAS+B,aAKpB5B,EAAgBC,KAGnBU,MAAM,WACL7B,QAAQC,IACN,mEA5DA8C,CAAwB5B,GAGxBD,EAAgBC,MCvBxB6B","file":"static/js/main.04a53d50.chunk.js","sourcesContent":["//import React from  'react'\r\n\r\n//or\r\nimport React, {Component} from  'react'\r\n\r\nimport FaPencil from 'react-icons/lib/fa/pencil'\r\nimport FaTrash from 'react-icons/lib/fa/trash'\r\n//import {FaPencilAlt} from 'react-icons/fa'\r\n//import {FaTrash} from 'react-icons/fa'\r\nimport FaFloppyO from 'react-icons/lib/fa/floppy-o'\r\n\r\n\r\nclass Note extends Component {\r\n//class Note extends React.Component {\r\n  //constructor\r\n  constructor(props){\r\n    super(props)\r\n    //add state events\r\n    this.state = {editing: false}\r\n\r\n    this.edit = this.edit.bind(this)\r\n    this.remove = this.remove.bind(this)\r\n    this.save = this.save.bind(this)\r\n\r\n    this.renderForm = this.renderForm.bind(this)\r\n    this.renderDisplay = this.renderDisplay.bind(this)\r\n    this.randomBetween = this.randomBetween.bind(this)\r\n  }\r\n\r\n  //update style for notes (random on the screen plus rotation)\r\n  componentWillMount(){\r\n    this.style = {\r\n      right: this.randomBetween(0, window.innerWidth - 150, 'px'),\r\n      top: this.randomBetween(0, window.innerHeight - 150, 'px'),\r\n      transform: `rotate(${this.randomBetween(-25,25,'deg')})`\r\n    }\r\n  }\r\n\r\n  //highlight the text on editing\r\n  componentDidUpdate(){\r\n    var textArea\r\n    if(this.state.editing) {\r\n      textArea = this._newText\r\n      textArea.focus()\r\n      textArea.select()\r\n    }\r\n  }\r\n\r\n  //if component not updated keep note in the same setState\r\n  shouldComponentUpdate(nextProps, nextState){\r\n    return(\r\n      this.props.children !== nextProps.children || this.state !== nextState\r\n    )\r\n  }\r\n\r\n  //place notes randomly on the screen\r\n  // s - unit of measure (pix)\r\n  randomBetween (x,y,s){\r\n    return x + Math.ceil(Math.random() * (y-x)) + s\r\n  }\r\n\r\n  //edit state\r\n  //onClick events\r\n  edit(){\r\n    //alert('editing note')\r\n    this.setState({\r\n      editing: true\r\n    })\r\n  }\r\n\r\n  remove(){\r\n    //alert('removing note')\r\n    this.props.onRemove(this.props.index)\r\n  }\r\n\r\n  save(e){\r\n    //alert('saved!')\r\n    //alert(this._newText.value)\r\n    e.preventDefault()\r\n    this.props.onChange(this._newText.value, this.props.index)\r\n    this.setState({\r\n      editing: false\r\n    })\r\n  }\r\n\r\n //Form + updated style\r\n  renderForm(){\r\n    return(\r\n      <div className = \"note\" style = {this.style}>\r\n        <form onSubmit = {this.save}>\r\n          <textarea ref = {input => this._newText = input}\r\n                          defaultValue = {this.props.children}/>\r\n          <button id = \"save\"><FaFloppyO /></button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  //Display + updated style\r\n  renderDisplay(){\r\n    return(\r\n      <div className = \"note\" style = {this.style}>\r\n        <p>{this.props.children}</p>\r\n        <span>\r\n          <button onClick = {this.edit} id = \"edit\"><FaPencil /></button>\r\n          <button onClick = {this.remove} id = \"remove\"><FaTrash /></button>\r\n        </span>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  //functionality\r\n  render(){\r\n    // if (this.state.editing){\r\n    //   return this.renderForm()\r\n    // }\r\n    // else {return this.renderDisplay()}\r\n\r\n    //or\r\n    return this.state.editing ? this.renderForm() : this.renderDisplay()\r\n\r\n  }\r\n}\r\n\r\n\r\nexport default Note\r\n","import React, {Component} from 'react'\r\nimport Note from './Note'\r\nimport FaPlus from 'react-icons/lib/fa/plus'\r\n//export Fa500px from './500px'\r\n\r\nclass Board extends Component {\r\n  //constructor\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      //array of notes\r\n      notes: [\r\n        {\r\n          id: this.nextId(),\r\n          note: \"\"\r\n        }\r\n        // {\r\n        //   id: 0,\r\n        //   note: \"Call Yuriy\"\r\n        // },\r\n        // {\r\n        //   id: 1,\r\n        //   note: \"Email Daniel\"\r\n        // },\r\n        // {\r\n        //   id: 2,\r\n        //   note: \"Order printer ink\"\r\n        // }\r\n      ]\r\n    }\r\n    this.add = this.add.bind(this)\r\n    this.eachNote = this.eachNote.bind(this)\r\n    this.update = this.update.bind(this)\r\n    this.remove = this.remove.bind(this)\r\n    this.nextId = this.nextId.bind(this)\r\n  }\r\n\r\n  //get info from API with 'Fetch'\r\n  componentWillMount(){\r\n    var self = this\r\n    if(this.props.count){\r\n      fetch(`https://baconipsum.com/api/?type=all-meat&sentences=${this.props.count}`)\r\n        .then(response => response.json())\r\n        .then(json => json[0]\r\n                        .split('. ')\r\n                        .forEach(sentence => self.add(sentence.substring(0, 25)))\r\n             )\r\n    }\r\n  }\r\n\r\n  //add note\r\n  add(text){\r\n    console.log('add note')\r\n    this.setState(prevState => ({\r\n      notes: [\r\n        ...prevState.notes, {\r\n          id: this.nextId(),\r\n          note: text\r\n        }\r\n      ]\r\n    }))\r\n  }\r\n\r\n  //create id for a note in add(text) method\r\n  nextId(){\r\n    this.uniqueId = this.uniqueId || 0\r\n    return this.uniqueId++\r\n  }\r\n\r\n  //update text in the note\r\n  update(newText, i){\r\n    console.log('updating item at index', i, newText)\r\n    this.setState(prevState => ({\r\n      notes: prevState.notes.map(\r\n        note => (note.id !== i) ? note : {...note, note: newText}\r\n      )\r\n    }))\r\n  }\r\n\r\n  //remove note\r\n  remove(id){\r\n    console.log('removing item at ', id)\r\n    this.setState(prevState => ({\r\n      notes:prevState.notes.filter(note => note.id !== id)\r\n    }))\r\n  }\r\n\r\n  //display notes\r\n  eachNote(note, i){\r\n    return(\r\n      //keep track which note was updated and/or deleted and to avoid an issue with unique keys\r\n      <Note key = {note.id}\r\n            index = {note.id}\r\n            onChange = {this.update}\r\n            onRemove = {this.remove}>\r\n            {note.note}\r\n      </Note>\r\n    )\r\n  }\r\n\r\n  //render Board\r\n  render(){\r\n    return(\r\n      <div className = \"board\">\r\n        {this.state.notes.map(this.eachNote)}\r\n        <button onClick = {this.add.bind(null, \"New Note\")}\r\n        id = \"add\">\r\n          <FaPlus />\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Board\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\n//import Note from './Note';\nimport Board from './Board'\n//import * as serviceWorker from './serviceWorker'\nimport registerServiceWorker from './registerServiceWorker'\n//export Fa500px from './500px';\n\n//passing count\nReactDOM.render(<Board count={50}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\nregisterServiceWorker()\n"],"sourceRoot":""}